#include "r6bot_controller.hpp"

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 命名空间
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
namespace r6bot_controller_namespace
{
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 构造函数
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
R6BotController::R6BotController() : controller_interface::ControllerInterface() {}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 初始化
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
controller_interface::CallbackReturn R6BotController::on_init() {
  std::cout << "===== 控制器初始化开始 =====" << std::endl;

  std::cout << "===== 控制器初始化完成 =====" << std::endl;
  return controller_interface::CallbackReturn::SUCCESS;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 配置
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
controller_interface::CallbackReturn R6BotController::on_configure(const rclcpp_lifecycle::State & previous_state) {
  std::cout << "===== 控制器配置开始 =====" << std::endl;
  (void)previous_state;

  std::cout << "===== 控制器配置完成 =====" << std::endl;
  return controller_interface::CallbackReturn::SUCCESS;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 命令接口配置
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
controller_interface::InterfaceConfiguration R6BotController::command_interface_configuration() const {
  std::cout << "===== 控制器命令接口配置开始 =====" << std::endl;

  std::cout << "===== 控制器命令接口配置完成 =====" << std::endl;
  return controller_interface::InterfaceConfiguration();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 状态接口配置
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
controller_interface::InterfaceConfiguration R6BotController::state_interface_configuration() const {
  std::cout << "===== 控制器状态接口配置开始 =====" << std::endl;

  std::cout << "===== 控制器状态接口配置完成 =====" << std::endl;
  return controller_interface::InterfaceConfiguration();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 激活
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
controller_interface::CallbackReturn R6BotController::on_activate(const rclcpp_lifecycle::State & previous_state) {
  std::cout << "===== 控制器激活开始 =====" << std::endl;
  (void)previous_state;

  std::cout << "===== 控制器激活完成 =====" << std::endl;
  return controller_interface::CallbackReturn::SUCCESS;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 更新
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
controller_interface::return_type R6BotController::update(const rclcpp::Time & time, const rclcpp::Duration & period) {
  std::cout << "===== 控制器更新开始 =====" << std::endl;
  std::cout << "time: " << std::fixed << std::setprecision(3) << time.seconds() << std::endl;
  std::cout << "period: " << std::fixed << std::setprecision(3) << period.seconds() << std::endl;

  std::cout << "===== 控制器更新完成 =====" << std::endl;
  return controller_interface::return_type::OK;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 禁用
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
controller_interface::CallbackReturn R6BotController::on_deactivate(const rclcpp_lifecycle::State & previous_state) {
  std::cout << "===== 控制器禁用开始 =====" << std::endl;
  (void)previous_state;

  std::cout << "===== 控制器禁用完成 =====" << std::endl;
  return controller_interface::CallbackReturn::SUCCESS;
}

}   // namespace r6bot_controller_namespace

#include "pluginlib/class_list_macros.hpp"

PLUGINLIB_EXPORT_CLASS(r6bot_controller_namespace::R6BotController, controller_interface::ControllerInterface)
